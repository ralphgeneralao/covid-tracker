{"version":3,"sources":["components/Cards/Cards.module.css","images/coronavirus_logo-2-833x321.jpg","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","cx","card","infected","xs","md","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","src","coronaImage2","alt","PureComponent","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f888b71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","export default __webpack_public_path__ + \"static/media/coronavirus_logo-2-833x321.a2427bb2.jpg\";","import React from 'react'\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css';\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if(!confirmed) {\n    return 'Loading...'\n  }\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify='center'>\n        <Grid item component={Card} className={cx(styles.card, styles.infected)} xs={12} md={3}>\n          <CardContent>\n            <Typography color='textSecondary' gutterBottom>Infected</Typography>\n            <Typography variant='h5'>\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                duration={3}\n                separator=','\n              />\n            </Typography>\n            <Typography color='textSecondary'>\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant='body2'>Number of active cases</Typography>\n          </CardContent>\n        </Grid>\n        <Grid item component={Card} className={cx(styles.card, styles.recovered)} xs={12} md={3}>\n          <CardContent>\n            <Typography color='textSecondary' gutterBottom>Recovered</Typography>\n            <Typography variant='h5'>\n              <CountUp\n                start={0}\n                end={recovered.value}\n                duration={3}\n                separator=','\n              />\n            </Typography>\n            <Typography color='textSecondary'>\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant='body2'>Number of recoveries</Typography>\n          </CardContent>\n        </Grid>\n        <Grid item component={Card} className={cx(styles.card, styles.deaths)} xs={12} md={3}>\n          <CardContent>\n            <Typography color='textSecondary' gutterBottom>Deaths</Typography>\n            <Typography variant='h5'>\n              <CountUp\n                start={0}\n                end={deaths.value}\n                duration={3}\n                separator=','\n              />\n            </Typography>\n            <Typography color='textSecondary'>\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant='body2'>Number of deaths</Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default Cards;","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n\n  if(country) {\n    changeableUrl = `${url}/countries/${country}`\n  }\n\n  try {\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate\n    }))\n\n    return modifiedData;\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nexport const fetchCountries = async () => {\n  try {\n    const { data: { countries }} = await axios.get(`${url}/countries`);\n\n    return countries.map((country) => country.name);\n  } catch (error) {\n    console.log(error);\n  }\n}","import React,{ useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    }\n\n    fetchAPI();\n  }, []);\n\n  const lineChart = (\n    dailyData.length !== 0 ?\n    (<Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [{\n          data: dailyData.map(({ confirmed }) => confirmed),\n          label: 'Infected',\n          borderColor: '#3333ff',\n          fill: true\n        }, {\n          data: dailyData.map(({ deaths }) => deaths),\n          label: 'Infected',\n          borderColor: '#red',\n          backgroundColor: 'rgba(255, 0, 0, 0.5)',\n          fill: true\n        }],\n      }}\n    />) : null\n  );\n\n  console.log(confirmed, recovered, deaths)\n\n  const barChart = (\n    confirmed\n    ? (\n      <Bar\n        data={{\n          labels: ['Infected', 'Recovered', 'Deaths'],\n          datasets: [{\n            label: 'People',\n            backgroundColor: [\n              'rgba(0 , 0, 255, 0.5)',\n              'rgba(0 , 255, 0, 0.5)',\n              'rgba(255 , 0, 0, 0.5)'\n            ],\n            data: [confirmed.value, recovered.value, deaths.value]\n          }]\n        }}\n        options={{\n          legend: { display: false },\n          title: { display: true, text: `Current state in ${country}`}\n        }}\n      />\n    ) : null\n  )\n\n  return (\n    <div className={styles.container}>\n      {country ? barChart : lineChart}\n    </div>\n  )\n}\n\nexport default Chart;","import React,{ useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\n\nimport { fetchCountries } from '../../api';\n\nimport styles from './CountryPicker.module.css';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [fetchedCountries, setFetchedCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async() => {\n      setFetchedCountries(await fetchCountries());\n    }\n\n    fetchAPI()\n  }, [setFetchedCountries])\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect\n        defaultValue=''\n        onChange={(e) => handleCountryChange(e.target.value)}\n      >\n        <option value=''>Global</option>\n        {\n          fetchedCountries.map((country, i) =>\n            <option key={i} value={country}>\n              {country}\n            </option>\n          )\n        }\n      </NativeSelect>\n    </FormControl>\n  )\n}\n\nexport default CountryPicker","import React, { PureComponent } from 'react'\n// import coronaImage from './images/image.png'\nimport coronaImage2 from './images/coronavirus_logo-2-833x321.jpg'\n\nimport { Cards, Chart, CountryPicker } from './components';\nimport styles from './App.module.css';\nimport { fetchData } from './api';\n\nexport default class App extends PureComponent {\n  state = {\n    data: {},\n    country: ''\n  }\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n\n    this.setState({ data: fetchedData })\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country)\n\n    this.setState({ data: fetchedData, country })\n  }\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={coronaImage2} alt='COVID-19' />\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Chart data={data} country={country} />\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};"],"sourceRoot":""}